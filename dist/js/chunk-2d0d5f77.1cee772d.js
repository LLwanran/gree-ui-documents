(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0d5f77"],{7118:function(e,r,t){"use strict";t.r(r);var o=function(){var e=this,r=e.$createElement;e._self._c;return e._m(0)},c=[function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("div",{staticClass:"markdown-body"},[t("h1",[e._v("Git 命令速查")]),t("p",[t("code",{pre:!0},[e._v("git init")]),t("strong",{staticStyle:{color:"#ed4014"}},[e._v("初始化本地 git 仓库（创建新仓库）")]),t("br"),t("code",{pre:!0},[e._v('git config --global user.name "liyaofei"')]),e._v(" 配置用户名"),t("br"),t("code",{pre:!0},[e._v('git config --global user.email "316683022@qq.com"')]),e._v(" 配置邮件"),t("br"),t("code",{pre:!0},[e._v("git config --global color.ui true")]),e._v(" git status 等命令自动着色"),t("br"),t("code",{pre:!0},[e._v("git config --global color.status auto")]),t("br"),t("code",{pre:!0},[e._v("git config --global color.diff auto")]),t("br"),t("code",{pre:!0},[e._v("git config --global color.branch auto")]),t("br"),t("code",{pre:!0},[e._v("git config --global color.interactive auto")]),t("br"),t("code",{pre:!0},[e._v("git config --global --unset http.proxy")]),e._v(" 删除 git 上的代理配置"),t("br"),t("code",{pre:!0},[e._v("git clone git+ssh://git@127.0.0.1/gree-ui.git")]),e._v(" clone 远程仓库"),t("br"),t("code",{pre:!0},[e._v("git status")]),t("strong",{staticStyle:{color:"#ed4014"}},[e._v("查看当前版本状态（是否修改）")]),t("br"),t("code",{pre:!0},[e._v("git add xyz")]),e._v(" 添加 xyz 文件至 index"),t("br"),t("code",{pre:!0},[e._v("git add .")]),t("strong",{staticStyle:{color:"#ed4014"}},[e._v("增加当前子目录下所有更改过的文件至 index")]),t("br"),t("code",{pre:!0},[e._v("git commit -m 'commit message'")]),t("strong",{staticStyle:{color:"#ed4014"}},[e._v("提交")]),t("br"),t("code",{pre:!0},[e._v("git commit --amend -m 'xxx'")]),e._v(" 合并上一次提交（用于反复修改）"),t("br"),t("code",{pre:!0},[e._v("git commit -am 'xxx'")]),e._v(" 将 add 和 commit 合为一步"),t("br"),t("code",{pre:!0},[e._v("git rm xxx")]),e._v(" 删除 index 中的文件"),t("br"),t("code",{pre:!0},[e._v("git rm -r *")]),e._v(" 递归删除"),t("br"),t("code",{pre:!0},[e._v("git log")]),t("strong",{staticStyle:{color:"#ed4014"}},[e._v("显示提交日志")]),t("br"),t("code",{pre:!0},[e._v("git log -n")]),e._v(" 显示 n 行日志 -n 为 n 行"),t("br"),t("code",{pre:!0},[e._v("git log --stat")]),e._v(" 显示提交日志及相关变动文件"),t("br"),t("code",{pre:!0},[e._v("git show dfb02e6e4f2f7b573337763e5c0013802e392818")]),e._v(" 显示某个提交的详细内容"),t("br"),t("code",{pre:!0},[e._v("git show dfb02")]),e._v(" 可只用 commitid 的前几位"),t("br"),t("code",{pre:!0},[e._v("git show HEAD")]),t("strong",{staticStyle:{color:"#ed4014"}},[e._v("显示 HEAD 提交日志")]),t("br"),t("code",{pre:!0},[e._v("git show HEAD^")]),e._v(" 显示 HEAD 的父（上一个版本）的提交日志 ^^为上两个版本 ^5 为上 5 个版本"),t("br"),t("code",{pre:!0},[e._v("git tag")]),t("strong",{staticStyle:{color:"#ed4014"}},[e._v("显示已存在的 tag")]),t("br"),t("code",{pre:!0},[e._v("git tag -a v2.0 -m 'xxx'")]),e._v(" 增加 v2.0 的 tag"),t("br"),t("code",{pre:!0},[e._v("git show v2.0")]),e._v(" 显示 v2.0 的日志及详细内容"),t("br"),t("code",{pre:!0},[e._v("git log v2.0")]),e._v(" 显示 v2.0 的日志"),t("br"),t("code",{pre:!0},[e._v("git diff")]),t("strong",{staticStyle:{color:"#ed4014"}},[e._v("显示所有未添加至 index 的变更")]),t("br"),t("code",{pre:!0},[e._v("git diff --cached")]),e._v(" 显示所有已添加 index 但还未 commit 的变更"),t("br"),t("code",{pre:!0},[e._v("git diff HEAD^")]),e._v(" 比较与上一个版本的差异"),t("br"),t("code",{pre:!0},[e._v("git diff HEAD -- ./lib")]),e._v(" 比较与 HEAD 版本 lib 目录的差异"),t("br"),t("code",{pre:!0},[e._v("git diff origin/master..master")]),e._v(" 比较远程分支 master 上有本地分支 master 上没有的"),t("br"),t("code",{pre:!0},[e._v("git diff origin/master..master --stat")]),e._v(" 只显示差异的文件，不显示具体内容"),t("br"),t("code",{pre:!0},[e._v("git remote add origin git+ssh://git@192.168.53.168/VT.git")]),e._v(" 增加远程定义（用于 push/pull/fetch）"),t("br"),t("code",{pre:!0},[e._v("git branch")]),t("strong",{staticStyle:{color:"#ed4014"}},[e._v("显示本地分支")]),t("br"),t("code",{pre:!0},[e._v("git branch --contains 50089")]),e._v(" 显示包含提交 50089 的分支"),t("br"),t("code",{pre:!0},[e._v("git branch -a")]),e._v(" 显示所有分支"),t("br"),t("code",{pre:!0},[e._v("git branch -r")]),e._v(" 显示所有原创分支"),t("br"),t("code",{pre:!0},[e._v("git branch --merged")]),e._v(" 显示所有已合并到当前分支的分支"),t("br"),t("code",{pre:!0},[e._v("git branch --no-merged")]),e._v(" 显示所有未合并到当前分支的分支"),t("br"),t("code",{pre:!0},[e._v("git branch -m master master_copy")]),e._v(" 本地分支改名"),t("br"),t("code",{pre:!0},[e._v("git checkout -b master_copy")]),t("strong",{staticStyle:{color:"#ed4014"}},[e._v("从当前分支创建新分支 master_copy 并检出")]),t("br"),t("code",{pre:!0},[e._v("git checkout -b master master_copy")]),e._v(" 上面的完整版"),t("br"),t("code",{pre:!0},[e._v("git checkout features/performance")]),e._v(" 检出已存在的 features/performance 分支"),t("br"),t("code",{pre:!0},[e._v("git checkout --track hotfixes/BJVEP933")]),e._v(" 检出远程分支 hotfixes/BJVEP933 并创建本地跟踪分支"),t("br"),t("code",{pre:!0},[e._v("git checkout v2.0")]),e._v(" 检出版本 v2.0"),t("br"),t("code",{pre:!0},[e._v("git checkout -b devel origin/develop")]),e._v(" 从远程分支 develop 创建新本地分支 devel 并检出"),t("br"),t("code",{pre:!0},[e._v("git checkout -- README")]),e._v(" 检出 head 版本的 README 文件（可用于修改错误回退）"),t("br"),t("code",{pre:!0},[e._v("git merge origin/master")]),t("strong",{staticStyle:{color:"#ed4014"}},[e._v("合并远程 master 分支至当前分支")]),t("br"),t("code",{pre:!0},[e._v("git cherry-pick ff44785404a8e")]),e._v(" 合并提交 ff44785404a8e 的修改"),t("br"),t("code",{pre:!0},[e._v("git push origin master")]),t("strong",{staticStyle:{color:"#ed4014"}},[e._v("将当前分支 push 到远程 master 分支")]),t("br"),t("code",{pre:!0},[e._v("git push origin :hotfixes/BJVEP933")]),e._v(" 删除远程仓库的 hotfixes/BJVEP933 分支"),t("br"),t("code",{pre:!0},[e._v("git push --tags")]),e._v(" 把所有 tag 推送到远程仓库"),t("br"),t("code",{pre:!0},[e._v("git fetch")]),t("strong",{staticStyle:{color:"#ed4014"}},[e._v("获取所有远程分支（不更新本地分支，另需 merge）")]),t("br"),t("code",{pre:!0},[e._v("git fetch --prune")]),e._v(" 获取所有原创分支并清除服务器上已删掉的分支"),t("br"),t("code",{pre:!0},[e._v("git pull origin master")]),t("strong",{staticStyle:{color:"#ed4014"}},[e._v("获取远程分支 master 并 merge 到当前分支")]),t("br"),t("code",{pre:!0},[e._v("git mv README README2")]),e._v(" 重命名文件 README 为 README2"),t("br"),t("code",{pre:!0},[e._v("git reset --hard HEAD")]),e._v(" 将当前版本重置为 HEAD（通常用于 merge 失败回退）"),t("br"),t("code",{pre:!0},[e._v("git rebase")]),t("strong",{staticStyle:{color:"#ed4014"}},[e._v("合并多次提交纪录")]),t("br"),t("code",{pre:!0},[e._v("git branch -d hotfixes/BJVEP933")]),e._v(" 删除分支 hotfixes/BJVEP933（本分支修改已合并到其他分支）"),t("br"),t("code",{pre:!0},[e._v("git branch -D hotfixes/BJVEP933")]),e._v(" 强制删除分支 hotfixes/BJVEP933"),t("br"),t("code",{pre:!0},[e._v("git ls-files")]),e._v(" 列出 git index 包含的文件"),t("br"),t("code",{pre:!0},[e._v("git show-branch")]),e._v(" 图示当前分支历史"),t("br"),t("code",{pre:!0},[e._v("git show-branch --all")]),e._v(" 图示所有分支历史"),t("br"),t("code",{pre:!0},[e._v("git whatchanged")]),e._v(" 显示提交历史对应的文件修改"),t("br"),t("code",{pre:!0},[e._v("git revert dfb02e6e4f2f7b573337763e5c0013802e392818")]),e._v(" 撤销提交 dfb02e6e4f2f7b573337763e5c0013802e392818"),t("br"),t("code",{pre:!0},[e._v("git ls-tree HEAD")]),e._v(" 内部命令：显示某个 git 对象"),t("br"),t("code",{pre:!0},[e._v("git rev-parse v2.0")]),e._v(" 内部命令：显示某个 ref 对于的 SHA1 HASH"),t("br"),t("code",{pre:!0},[e._v("git reflog")]),t("strong",{staticStyle:{color:"#ed4014"}},[e._v("显示所有提交，包括孤立节点")]),t("br"),t("code",{pre:!0},[e._v("git show HEAD@{5}")]),e._v(" 查看仓库中 HEAD 在五次前的值"),t("br"),t("code",{pre:!0},[e._v("git show master@{yesterday}")]),e._v(" 显示 master 分支昨天的状态"),t("br"),t("code",{pre:!0},[e._v("git log --pretty=format:'%h %s' --graph")]),e._v(" 图示提交日志"),t("br"),t("code",{pre:!0},[e._v("git show HEAD~3")]),e._v(" 显示 HEAD 的第 3 父提交"),t("br"),t("code",{pre:!0},[e._v("git show -s --pretty=raw 2be7fcb476")]),t("br"),t("code",{pre:!0},[e._v("git stash")]),t("strong",{staticStyle:{color:"#ed4014"}},[e._v("暂存当前修改，将所有至为 HEAD 状态")]),t("br"),t("code",{pre:!0},[e._v("git stash list")]),e._v(" 查看所有暂存"),t("br"),t("code",{pre:!0},[e._v("git stash show -p stash@{0}")]),e._v(" 参考第一次暂存"),t("br"),t("code",{pre:!0},[e._v("git stash apply stash@{0}")]),e._v(" 应用第一次暂存"),t("br"),t("code",{pre:!0},[e._v('git grep "delete from"')]),e._v(" 文件中搜索文本“delete from”"),t("br"),t("code",{pre:!0},[e._v("git grep -e '#define' --and -e SORT_DIRENT")]),e._v(" 查找在仓库的哪个地方定义了’SORT_DIRENT’"),t("br"),t("code",{pre:!0},[e._v("git gc")]),e._v(" 检查是否需要进行任何清洁工作"),t("br"),t("code",{pre:!0},[e._v("git fsck")]),e._v(" 恢复误删 stash 贮藏的数据")])])}],i=t("2877"),v={},_=Object(i["a"])(v,o,c,!1,null,null,null);r["default"]=_.exports}}]);